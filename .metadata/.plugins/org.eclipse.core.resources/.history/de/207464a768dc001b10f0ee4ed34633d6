package com.group.approval.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import com.group.approval.dto.Approval;
import com.group.approval.dto.Document;
import com.group.approval.exception.ModifyException;
import com.group.approval.exception.UpdateException;
import com.group.sql.DBConnection;
import com.group.sql.MyConnection;

public class ProcessDocsDAOOracle implements ProcessDocsDAO {

	@Override
	//사용자는 버튼을 클릭하면 승인or반려할지를 선택하고, 코멘트를 남길 수 있다. (결재승인테이블)
	public void updateApproval(Approval ap) throws UpdateException {
		// DB연결
		Connection con = null;
		try {
			con = MyConnection.getConnection();
			con.setAutoCommit(false);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new UpdateException(e.getMessage());
		}
 
		//ap_type, ap_date, ap_comment가 수정돼야 함
		String str = "";
		if (ap.getAp_type() != null) {
			str += " ap_type='" + ap.ap_type + "',";
		}
		
		if (ap.getAp_ap_comment() != null) {
			str += " ap_comment='" + ap.ap_ap_comment + "',";
		}
		
		String updateApprovalSQL = "UPDATE approval SET" + str.substring(0, str.length() -1)
		+ ",ap_date=SYSTIMESTMAP WHERE document_no=? and employee_id=?";
		
		System.out.println(updateApprovalSQL);

		
	}
		

	@Override
	public void updateAgreement(Document d) throws UpdateException {
		// DB연결
		Connection con = null;
		try {
			con = MyConnection.getConnection();
			con.setAutoCommit(false);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new UpdateException(e.getMessage());
		}
		String updateAgreementSQL = "UPDATE agreement SET ap_comment=?,ap_type=?,ap_date=SYSTIMESTAMP\r\n"
				+ "WHERE document_no=? and employee_id=?";
		PreparedStatement pstmt = null;
	}

	@Override
	// 참조자의 참조 승인 선택
	public void updateReference(Document d) throws UpdateException {
		// DB연결
		Connection con = null;
		try {
			con = MyConnection.getConnection();
			con.setAutoCommit(false);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new UpdateException(e.getMessage());
		}
		String updateReferenceSQL = "UPDATE reference SET ap_date=SYSTIMESTAMP WHERE document_no=? AND employee_id=?";
		PreparedStatement pstmt = null;	
	}

	@Override
	// 모두 승인처리를 할 경우, 최종 상태를 '승인'으로
	public void documentAudmit(String document_no) throws ModifyException {
		// DB연결
		Connection con = null;
		try {
			con = MyConnection.getConnection();
			con.setAutoCommit(false);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new ModifyException(e.getMessage());
		}
		
		String documentAudmitSQL = "create or replace procedure AUDMIT(documentNo varchar2, EmployeeId varchar2)\r\n" + 
				"IS \r\n" + 
				"    cntAg1 number;\r\n" + 
				"    cntAg2 number;\r\n" + 
				"    \r\n" + 
				"    cntAp1 number;\r\n" + 
				"    cntAp2 number;\r\n" + 
				"BEGIN\r\n" + 
				"  Update approval set ap_type='승인' WHERE document_no=documentNo AND employee_id=EmployeeId;\r\n" + 
				"  commit;\r\n" + 
				"   SELECT count(*) into cntAg1 \r\n" + 
				"    FROM agreement \r\n" + 
				"    WHERE ap_type='승인' AND document_no=documentNo; /*문서 합의 승인개수 */\r\n" + 
				"\r\n" + 
				"    SELECT count(*) into cntAg2 \r\n" + 
				"    FROM agreement \r\n" + 
				"    WHERE document_no=documentNo;  /*문서 합의해야할 승인개수 */\r\n" + 
				"\r\n" + 
				"    SELECT count(*) into cntAp1 \r\n" + 
				"    FROM approval \r\n" + 
				"    WHERE ap_type='승인' AND document_no=documentNo; /* 문서 결재 승인개수 */\r\n" + 
				"\r\n" + 
				"    SELECT count(*) into cntAp2 \r\n" + 
				"    FROM approval \r\n" + 
				"    WHERE document_no=documentNo; /* 문서 결재해야할 승인개수 */\r\n" + 
				"\r\n" + 
				"    IF cntAg1=cntAg2 AND cntAp1=cntAp2 THEN\r\n" + 
				"        UPDATE document SET document_status='승인' WHERE document_no=documentNo; \r\n" + 
				"\r\n" + 
				"    END IF;   \r\n" + 
				"commit; \r\n" + 
				"END;\r\n" + 
				"/\r\n" + 
				"\r\n" + 
				"EXECUTE AUDMIT(? , ?)";
//		CallableStatement cs = con.prepareCall("{call AUDMIT(?,?)}");
//		CallableStatement cstmt;
//		cstmt = MyConnection.prepareCall("{call AUDMIT(?,?) }");
//		cstmt.execute();
	}

	@Override
	// 한 명이라도 반려 할 경우, 최종 상태는 '반려'
	public void documentRefuse(String document_no) throws ModifyException {
		// DB연결
		Connection con = null;
		try {
			con = MyConnection.getConnection();
			con.setAutoCommit(false);
		} catch (SQLException e) {
			e.printStackTrace();
			throw new ModifyException(e.getMessage());
		}
		String documentRefuseSQL = "\r\n" + 
				"create or replace procedure REFUSE(documentNo varchar2, EmployeeId varchar2)\r\n" + 
				"IS \r\n" + 
				"cntAg1 number;\r\n" + 
				"cntAp1 number; \r\n" + 
				"BEGIN\r\n" + 
				"  Update agreement set ap_type='반려' WHERE document_no=documentNo AND employee_id=EmployeeId;\r\n" + 
				"  commit;\r\n" + 
				"\r\n" + 
				"      SELECT count(*) into cntAg1 \r\n" + 
				"    FROM agreement \r\n" + 
				"    WHERE ap_type='반려' AND document_no=documentNo;\r\n" + 
				"    \r\n" + 
				"\r\n" + 
				"    SELECT count(*) into cntAp1 \r\n" + 
				"    FROM approval \r\n" + 
				"    WHERE ap_type='반려' AND document_no=documentNo; \r\n" + 
				"    \r\n" + 
				"\r\n" + 
				"  IF cntAg1>=1 OR cntAp1>=1 THEN\r\n" + 
				"  DBMS_OUTPUT.PUT_LINE(cntAg1);\r\n" + 
				"  DBMS_OUTPUT.PUT_LINE(cntAp1);\r\n" + 
				"        UPDATE document SET document_status='반려' WHERE document_no=documentNo;\r\n" + 
				"\r\n" + 
				"    END IF;   \r\n" + 
				"commit; \r\n" + 
				"END;\r\n" + 
				"/\r\n" + 
				"\r\n" + 
				"EXECUTE REFUSE(?,?)";
	}

}
